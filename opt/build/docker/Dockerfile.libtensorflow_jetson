ARG BUILD_IMAGE=nvcr.io/nvidia/l4t-tensorflow:r32.4.3-tf2.2-py3
FROM ${BUILD_IMAGE}
ARG CUDA_VERSION="10.2"
ARG CUDNN_VERSION="8"
ARG CUDA_TOOLKIT_PATH="/usr/local/cuda"
ARG TF_BRANCH="r2.3"
ARG TF_TENSORRT_VERSION="7.2"
ARG TF_NCCL_VERSION=""
ARG TF_CUDA_PATHS=""

RUN wget https://github.com/bazelbuild/bazel/releases/download/3.6.0/bazel-3.6.0-linux-arm64 && \
    chmod +x bazel-3.6.0-linux-arm64 && \
    mv bazel-3.6.0-linux-arm64 /usr/bin/bazel

# Running bazel inside a `docker build` command causes trouble, cf:
# https://github.com/bazelbuild/bazel/issues/134
# The easiest solution is to set up a bazelrc file forcing --batch.
RUN echo "startup --batch" >>/etc/bazel.bazelrc
# Similarly, we need to workaround sandboxing issues:
#   https://github.com/bazelbuild/bazel/issues/418
RUN echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
    >>/etc/bazel.bazelrc

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
          python3-pip \
		  python3-dev \
          python3-matplotlib \
		  build-essential \
		  gfortran \
		  git \
		  cmake \
		  libopenblas-dev \
		  liblapack-dev \
		  libblas-dev \
		  libhdf5-serial-dev \
		  hdf5-tools \
		  libhdf5-dev \
		  zlib1g-dev \
		  zip \
		  libjpeg8-dev \
		  libopenmpi2 \
          openmpi-bin \
          openmpi-common \
		  nodejs \
		  npm \
		  protobuf-compiler \
          libprotoc-dev \
		llvm-9 \
          llvm-9-dev \
    && rm -rf /var/lib/apt/lists/*

RUN cd / && \
    git clone https://github.com/tensorflow/tensorflow.git && \
    cd /tensorflow && \
    git checkout ${TF_BRANCH}

WORKDIR /tensorflow

ENV DEBIAN_FRONTEND=noninteractive
ENV PATH="/usr/local/cuda-${CUDA_VERSION}/bin:$PATH"
ARG MAKEFLAGS=-j8

# Set environment variables for configure.
ENV PYTHON_BIN_PATH=/usr/bin/python3 \
    TF_NEED_CUDA=1 \
    TF_NEED_TENSORRT=1 \
    TF_TENSORRT_VERSION=${TF_TENSORRT_VERSION} \
    TF_CUDA_VERSION=${CUDA_VERSION} \
    TF_CUDNN_VERSION=${CUDNN_VERSION} \
    TF_CUDA_COMPUTE_CAPABILITIES=5.3 \
    TF_CUDA_PATHS="/usr/lib/aarch64-linux-gnu/,/usr/local/cuda-10.2/lib64,/usr/local/cuda-10.2/targets/aarch64-linux/,/usr/local/cuda-10.2/targets/aarch64-linux/lib/,/usr/lib/aarch64-linux-gnu,/usr/local/lib,/usr/local/cuda-${CUDA_VERSION}," \
    CUDA_TOOLKIT_PATH="${CUDA_TOOLKIT_PATH}"

#####
# https://forums.developer.nvidia.com/t/jetpack-4-3-tensorflow-cant-find-cudart-10-0-shared-library/120845/9
#####
RUN ln -s /usr/lib/aarch64-linux-gnu/libcudnn.so.8.0.0 /usr/lib/aarch64-linux-gnu/libcudnn.so.7
RUN ln -s /usr/lib/aarch64-linux-gnu/libcublas.so /usr/lib/aarch64-linux-gnu/libcublas.so.10.0
RUN ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcupti.so.10 /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcupti.so.10.0
RUN ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcusolver.so.10 /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcusolver.so.10.0
RUN ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcurand.so.10 /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcurand.so.10.0
RUN ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcufft.so.10 /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcufft.so.10.0
RUN ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcudart.so /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcudart.so.10.0
RUN ln -s /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcusparse.so.10 /usr/local/cuda-10.2/targets/aarch64-linux/lib/libcusparse.so.10.0
RUN ln -s /usr/lib/aarch64-linux-gnu/libnvinfer.so /usr/lib/aarch64-linux-gnu/libnvinfer.so.6
RUN ln -s /usr/lib/aarch64-linux-gnu/libnvinfer_plugin.so.7 /usr/lib/aarch64-linux-gnu/libnvinfer_plugin.so.6

ENV PATH=/usr/local/cuda/bin:$PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64
ENV PATH=/usr/local/cuda-10.2/bin/:$PATH
ENV LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/aarch64-linux-gnu/

RUN ./configure

RUN bazel build \
    --action_env=LD_LIBRARY_PATH=${LD_LIBRARY_PATH} \
    --config=v2 --config=noaws --config=nogcp --config=cuda --config=nonccl --config=nohdfs \
    --config opt //tensorflow/tools/lib_package:libtensorflow

WORKDIR /root
